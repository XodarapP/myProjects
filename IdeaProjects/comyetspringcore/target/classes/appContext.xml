<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:c="http://www.springframework.org/schema/c"
       xmlns:util = "http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-3.0.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/util
        http://www.springframework.org/schema/util/spring-util-3.0.xsd">
    <context:annotation-config/>
    <import resource="loggers.xml"/>
    <aop:aspectj-autoproxy/>

    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:client.properties</value>
                <value>classpath:dbConnect.properties</value>
            </list>
        </property>
        <property name="ignoreResourceNotFound" value="true"/>
    </bean>



    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <constructor-arg ref="dataSource"/>
    </bean>

    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
          destroy-method="close">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>

    <bean id="dblogger" class="DBLogger">
        <constructor-arg ref="jdbcTemplate"/>
    </bean>



    <bean id="client" class="Client">
        <constructor-arg value="${id}"/>
        <constructor-arg value="${name}"/>
        <property name="greeting" value="${greeing}"/>
    </bean>

    <bean id="app" class="App">
        <constructor-arg ref="client"/>
        <constructor-arg value="#{ T(Event).isDay(8,17) ? cacheFileEventLogger : consoleEventLogger }"/>
        <constructor-arg ref="loggerMap"/>
    </bean>

    <util:map id="loggerMap">
        <entry key="INFO" value-ref="consoleEventLogger"/>
        <entry key="ERROR" value-ref="combinedEventLogger"/>
    </util:map>

    <!-- Вызов метода у класса java.text.DateFormat  scope - создавать каждый раз новый bean при вызове, <bean -class> - внутренний бин-->
    <bean id="event" class="Event" scope="prototype">
        <constructor-arg>
            <bean class="java.util.Date"/>
        </constructor-arg>
        <constructor-arg ref="dateFormat"/>
    </bean>

    <!-- Вызов метода у класса java.text.DateFormat -->
    <bean id="dateFormat" class="java.text.DateFormat"
            factory-method="getDateTimeInstance"/>

</beans>